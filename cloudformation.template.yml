Resources:

  # Build pipeline resources
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        # The downloaded source code for the build will come from CodePipeline
        Type: CODEPIPELINE
      Environment:
        # Linux container with node installed
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/standard:2.0"
      # This source record indicates that the code is coming from CodePipeline -- No buildspec specified so buildspec.yml will be used
      Source:
        Type: CODEPIPELINE

  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: Cull-Mock-IEX-Data-Source-Pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Ref CodePipelineArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
        - Name: BuildAndTest
          Actions:
            - Name: BuildAndTest
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject

  # This webhook allows the github changes to be pushed to CodePipeline rather than polled
  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: SourceAction
      Name: Cull-Mock-IEX-Data-Source-Webhook
      TargetPipelineVersion: !GetAtt AppPipeline.Version
      RegisterWithThirdParty: true

  # IAM Roles for this stack
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !GetAtt CodePipelineArtifactStoreBucket.Arn
                  - !Join ['', [!GetAtt CodePipelineArtifactStoreBucket.Arn, "/*"]]
  
  # IAM role that allows CodeBuild to interact with S3, CloudWatch, and CloudFront
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action:
                  - "cloudformation:List*"
                  - "cloudformation:Get*"
                  - "cloudformation:ValidateTemplate"
                Resource:
                  - "*"
              -
                Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateUploadBucket"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:Describe*"
                  - "cloudformation:UpdateStack"
                Resource:
                  - "arn:aws:cloudformation:*:*:stack/mock-iex-data-source-prod/*"
              -
                Effect: Allow
                Action:
                  - "lambda:Get*"
                  - "lambda:List*"
                  - "lambda:CreateFunction"
                Resource:
                  - "*"
              -
                Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - "*"
              -
                Effect: Allow
                Action:
                  - "lambda:AddPermission"
                  - "lambda:CreateAlias"
                  - "lambda:DeleteFunction"
                  - "lambda:InvokeFunction"
                  - "lambda:PublishVersion"
                  - "lambda:RemovePermission"
                  - "lambda:Update*"
                Resource:
                  - "arn:aws:lambda:*:*:function:mock-iex-data-source-prod-*"
              -
                Effect: Allow
                Action:
                  - "apigateway:GET"
                  - "apigateway:POST"
                  - "apigateway:PUT"
                  - "apigateway:DELETE"
                  - "apigateway:PATCH"
                Resource:
                  - "arn:aws:apigateway:*::/restapis*"
                  - "arn:aws:apigateway:*::/apikeys*"
                  - "arn:aws:apigateway:*::/usageplans*"
              -
                Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/*"
              -
                Effect: Allow
                Action: "kinesis:*"
                Resource:
                  - "arn:aws:kinesis:*:*:stream/mock-iex-data-source-prod-*"
              -
                Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:CreateRole"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                  - "iam:DeleteRole"
                Resource:
                  - "arn:aws:iam::*:role/mock-iex-data-source-prod-*-lambdaRole"
              -
                Effect: Allow
                Action: "sqs:*"
                Resource:
                  - "arn:aws:sqs:*:*:mock-iex-data-source-prod-*"
              -
                Effect: Allow
                Action:
                  - "cloudwatch:GetMetricStatistics"
                Resource: 
                  - "*"
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DeleteLogGroup"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:*"
              -
                Effect: Allow
                Action:
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeLogGroups"
                  - "logs:FilterLogEvents"
                Resource:
                  - "*"
              -
                Effect: Allow
                Action:
                  - "events:Put*"
                  - "events:Remove*"
                  - "events:Delete*"
                  - "events:DescribeRule"
                Resource:
                  - "arn:aws:events:*:*:rule/mock-iex-data-source-prod-*"

# List of parameters referenced in the template
Parameters:

  BranchName:
    Description: Build branch
    Type: String
    Default: master

  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: Mock-IEX-Data-Source

  GitHubOwner:
    Type: String
    Default: Cull-Web-App

  # The GitHub Secret and OAuth are SecretsManager secrets that are dynamically retrieved. They aren't in the template for obvious reasons
  GitHubSecret:
    Type: String
    NoEcho: true
    Default: '{{resolve:secretsmanager:GitHub:SecretString:Secret}}'
  
  # This parameter needs to be passed in everytime the stack is ran -- will not be remembered
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Default: '{{resolve:secretsmanager:GitHub:SecretString:OAuthToken}}'

  ApplicationName:
    Description: CodeDeploy application name
    Type: String
    Default: Mock-IEX-Data-Source